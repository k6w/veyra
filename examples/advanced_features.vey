# Advanced Veyra Language Features Demo
# This demonstrates all implemented language features

print("=== Advanced Veyra Language Demo ===")

# ===== Enhanced Variables and Types =====
print("\n--- Variables and Type System ---")

let name = "Veyra"
let version = 2.0
let is_production_ready = true
let mut feature_count = 0

print("Language: " + name)
print("Version: 2.0")
print("Production Ready: " + "yes")

# ===== Advanced Arithmetic =====
print("\n--- Advanced Arithmetic ---")

let a = 25
let b = 7
let c = 3.14159

print("Integer operations:")
print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(a % b)print("Mixed type operations:")
print(a + c)
print(a * c)

# ===== Enhanced Conditionals with elif =====
print("\n--- Enhanced Conditionals (elif) ---")

let temperature = 22
let humidity = 65

print("Temperature: 22°C, Humidity: 65%")

if temperature > 30 {
    print("Weather: Hot")
} elif temperature > 20 {
    if humidity > 70 {
        print("Weather: Warm and humid")
    } else {
        print("Weather: Warm and pleasant")
    }
} elif temperature > 10 {
    print("Weather: Cool")
} else {
    print("Weather: Cold")
}

let score = 87
print("Exam score: 87")

if score >= 90 {
    print("Grade: A (Excellent)")
} elif score >= 80 {
    print("Grade: B (Good)")
} elif score >= 70 {
    print("Grade: C (Average)")
} elif score >= 60 {
    print("Grade: D (Below Average)")
} else {
    print("Grade: F (Fail)")
}

# ===== Logical Operators =====
print("\n--- Logical Operators ---")

let is_sunny = true
let is_weekend = false
let has_homework = true

print("Sunny: true, Weekend: false, Homework: true")

if is_sunny and is_weekend {
    print("Perfect day for outdoor activities!")
} elif is_sunny and not has_homework {
    print("Good day to go outside!")
} elif is_sunny or is_weekend {
    print("Decent day!")
} else {
    print("Stay inside and work!")
}

# Logical combinations
let can_go_out = is_sunny and (is_weekend or not has_homework)
print(can_go_out)

# ===== Advanced Loops =====
print("\n--- Advanced Loops ---")

print("Counting with while:")
let mut counter = 1
while counter <= 5 {
    print(counter)
    counter = counter + 1
}

print("Array iteration with for:")
let numbers = [10, 20, 30, 40, 50]
for num in numbers {
    print(num)
}

print("Fibonacci sequence (first 8 numbers):")
let mut fib_a = 0
let mut fib_b = 1
let mut fib_count = 0

print("  " + str(fib_a))
print("  " + str(fib_b))

while fib_count < 6 {
    let fib_next = fib_a + fib_b
    print("  " + str(fib_next))
    fib_a = fib_b
    fib_b = fib_next
    fib_count = fib_count + 1
}

# ===== Advanced Functions =====
print("\n--- Advanced Functions ---")

fn calculate_circle_area(radius) {
    let pi = 3.14159
    let area = pi * radius * radius
    print("Circle with radius " + str(radius) + " has area " + str(area))
    return area
}

fn is_even(number) {
    return number % 2 == 0
}

fn classify_number(n) {
    if n > 0 {
        print(str(n) + " is positive")
    } elif n < 0 {
        print(str(n) + " is negative")  
    } else {
        print(str(n) + " is zero")
    }
    
    if is_even(n) {
        print(str(n) + " is even")
    } else {
        print(str(n) + " is odd")
    }
}

calculate_circle_area(5)
calculate_circle_area(10)

classify_number(42)
classify_number(-17)
classify_number(0)

# ===== Array Operations =====
print("\n--- Array Operations ---")

let fruits = ["apple", "banana", "cherry", "date"]
let numbers_array = [1, 4, 9, 16, 25]

print("Fruits array: " + str(fruits))
print("Numbers array: " + str(numbers_array))

print("Array indexing:")
print("  First fruit: " + fruits[0])
print("  Second fruit: " + fruits[1])
print("  Last fruit: " + fruits[3])

print("  First number: " + str(numbers_array[0]))
print("  Third number: " + str(numbers_array[2]))

print("Processing array with loop:")
for fruit in fruits {
    print("  Processing: " + fruit)
}

# ===== Advanced Algorithms =====
print("\n--- Advanced Algorithms ---")

fn bubble_sort_demo(arr) {
    print("Demonstrating bubble sort concept on: " + str(arr))
    let len = 5  # Simulated array length
    let mut i = 0
    
    while i < len - 1 {
        let mut j = 0
        while j < len - 1 - i {
            # In real implementation: if arr[j] > arr[j+1] { swap }
            print("  Comparing elements at positions " + str(j) + " and " + str(j + 1))
            j = j + 1
        }
        i = i + 1
    }
    print("  Sorting complete!")
}

fn binary_search_demo(target) {
    print("Binary search for " + str(target) + " in sorted array [1,3,5,7,9,11,13,15]")
    let mut low = 0
    let mut high = 7
    let mut found = false
    
    while low <= high and not found {
        let mid = (low + high) / 2
        print("  Checking middle position " + str(mid))
        
        # Simulated array values: [1,3,5,7,9,11,13,15]
        let mid_value = 1 + mid * 2  # Generate odd numbers
        
        if mid_value == target {
            print("  Found " + str(target) + " at position " + str(mid))
            found = true
        } elif mid_value < target {
            print("  " + str(mid_value) + " < " + str(target) + ", searching right half")
            low = mid + 1
        } else {
            print("  " + str(mid_value) + " > " + str(target) + ", searching left half")
            high = mid - 1
        }
    }
    
    if not found {
        print("  " + str(target) + " not found in array")
    }
}

bubble_sort_demo([64, 34, 25, 12, 22])
binary_search_demo(7)
binary_search_demo(16)

# ===== Complex Data Processing =====
print("\n--- Complex Data Processing ---")

fn analyze_student_grades(grades) {
    print("Analyzing grades: " + str(grades))
    
    let mut total = 0
    let mut count = 0
    let mut highest = 0
    let mut lowest = 100
    
    for grade in grades {
        total = total + grade
        count = count + 1
        
        if grade > highest {
            highest = grade
        }
        
        if grade < lowest {
            lowest = grade
        }
    }
    
    let average = total / count
    
    print("  Total students: " + str(count))
    print("  Average grade: " + str(average))
    print("  Highest grade: " + str(highest))
    print("  Lowest grade: " + str(lowest))
    
    if average >= 90 {
        print("  Class performance: Excellent")
    } elif average >= 80 {
        print("  Class performance: Good")
    } elif average >= 70 {
        print("  Class performance: Average")
    } else {
        print("  Class performance: Needs Improvement")
    }
}

let class_grades = [85, 92, 78, 96, 88, 79, 94, 87]
analyze_student_grades(class_grades)

# ===== Nested Data Structures =====
print("\n--- Nested Data Structures ---")

let matrix_row1 = [1, 2, 3]
let matrix_row2 = [4, 5, 6] 
let matrix_row3 = [7, 8, 9]

print("Matrix representation:")
print("  Row 1: " + str(matrix_row1))
print("  Row 2: " + str(matrix_row2))  
print("  Row 3: " + str(matrix_row3))

print("Matrix element access:")
print("  Element (0,0): " + str(matrix_row1[0]))
print("  Element (1,1): " + str(matrix_row2[1]))
print("  Element (2,2): " + str(matrix_row3[2]))

# ===== Comprehensive Function Examples =====
print("\n--- Comprehensive Function Examples ---")

fn factorial_iterative(n) {
    let mut result = 1
    let mut i = 1
    
    while i <= n {
        result = result * i
        i = i + 1
    }
    
    return result
}

fn factorial_recursive(n) {
    if n <= 1 {
        return 1
    } else {
        return n * factorial_recursive(n - 1)
    }
}

fn prime_check(n) {
    if n <= 1 {
        return false
    }
    
    if n == 2 {
        return true
    }
    
    if n % 2 == 0 {
        return false
    }
    
    let mut i = 3
    while i * i <= n {
        if n % i == 0 {
            return false
        }
        i = i + 2
    }
    
    return true
}

print("Factorial calculations:")
print("  5! (iterative) = " + str(factorial_iterative(5)))
print("  5! (recursive) = " + str(factorial_recursive(5)))
print("  7! (iterative) = " + str(factorial_iterative(7)))

print("Prime number checking:")
let test_numbers = [17, 18, 19, 20, 21]
for num in test_numbers {
    if prime_check(num) {
        print("  " + str(num) + " is prime")
    } else {
        print("  " + str(num) + " is not prime")
    }
}

print("\n=== Advanced Demo Complete ===")
print("Veyra now supports:")
print("✓ Variables and advanced types")
print("✓ Enhanced arithmetic operations")  
print("✓ Elif statements and complex conditionals")
print("✓ Logical operators (and, or, not)")
print("✓ For and while loops")
print("✓ Function definitions and recursion")
print("✓ Array operations and indexing")
print("✓ Complex algorithms and data processing")
print("✓ Nested data structures")
print("\nVeyra is now a powerful, feature-rich programming language!")