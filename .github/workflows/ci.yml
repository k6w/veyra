name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: |
          compiler/target
          runtime/target
          tools/target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-build-
    
    - name: Clean cross-platform artifacts
      run: |
        if [ -d "tools/target/x86_64-pc-windows-msvc" ] && [ "$RUNNER_OS" != "Windows" ]; then
          rm -rf tools/target/x86_64-pc-windows-msvc
        fi
        if [ -d "compiler/target/x86_64-pc-windows-msvc" ] && [ "$RUNNER_OS" != "Windows" ]; then
          rm -rf compiler/target/x86_64-pc-windows-msvc
        fi
        if [ -d "runtime/target/x86_64-pc-windows-msvc" ] && [ "$RUNNER_OS" != "Windows" ]; then
          rm -rf runtime/target/x86_64-pc-windows-msvc
        fi
      shell: bash
    
    - name: Build Compiler
      run: |
        cd compiler
        cargo build --verbose
    
    - name: Run Compiler Tests
      run: |
        cd compiler
        cargo test --verbose
    
    - name: Build Runtime
      run: |
        cd runtime
        cargo build --verbose
    
    - name: Run Runtime Tests
      run: |
        cd runtime
        cargo test --verbose
    
    - name: Build Tools
      run: |
        cd tools
        cargo build --verbose
    
    - name: Run Tools Tests
      run: |
        cd tools
        cargo test --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: |
        cd compiler
        cargo fmt -- --check
        cd ../runtime
        cargo fmt -- --check
        cd ../tools
        cargo fmt -- --check
    
    - name: Run clippy
      run: |
        cd compiler
        cargo clippy -- -D warnings
        cd ../runtime
        cargo clippy --all-targets -- -D warnings -A dead-code
        cd ../tools
        cargo clippy -- -D warnings
