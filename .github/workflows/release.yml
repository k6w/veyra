name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Veyra v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## Veyra Programming Language v${{ steps.get_version.outputs.version }}
          
          ### Downloads
          
          Download the appropriate binary for your platform below.
          
          ### Installation
          
          1. Download the binary for your OS
          2. Extract the archive
          3. Add the `bin` directory to your PATH
          
          See the [Quick Start Guide](https://github.com/k6w/veyra/blob/main/QUICK_START.md) for more information.

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: veyra-linux-x64
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: veyra-windows-x64
            archive_ext: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: veyra-macos-x64
            archive_ext: tar.gz
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build Compiler
      run: |
        cd compiler
        cargo build --release
    
    - name: Build Tools
      run: |
        cd tools
        cargo build --release
    
    - name: Create Release Directory (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release/bin
        cp compiler/target/release/veyra release/bin/ || true
        cp tools/target/release/veyra-repl release/bin/ || true
        cp tools/target/release/veyra-dbg release/bin/ || true
        cp tools/target/release/veyra-lint release/bin/ || true
        cp tools/target/release/veyra-lsp release/bin/ || true
        cp tools/target/release/veyra-pkg release/bin/ || true
        cp README.md release/
        cp LICENSE release/
        cp QUICK_START.md release/
    
    - name: Create Release Directory (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        New-Item -ItemType Directory -Force -Path release\bin
        Copy-Item compiler\target\release\veyra.exe release\bin\ -ErrorAction SilentlyContinue
        Copy-Item tools\target\release\veyra-repl.exe release\bin\ -ErrorAction SilentlyContinue
        Copy-Item tools\target\release\veyra-dbg.exe release\bin\ -ErrorAction SilentlyContinue
        Copy-Item tools\target\release\veyra-lint.exe release\bin\ -ErrorAction SilentlyContinue
        Copy-Item tools\target\release\veyra-lsp.exe release\bin\ -ErrorAction SilentlyContinue
        Copy-Item tools\target\release\veyra-pkg.exe release\bin\ -ErrorAction SilentlyContinue
        Copy-Item README.md release\
        Copy-Item LICENSE release\
        Copy-Item QUICK_START.md release\
    
    - name: Create Archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        tar czf ../${{ matrix.artifact_name }}.tar.gz *
    
    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        Compress-Archive -Path * -DestinationPath ..\${{ matrix.artifact_name }}.zip
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}.${{ matrix.archive_ext }}
        asset_name: ${{ matrix.artifact_name }}.${{ matrix.archive_ext }}
        asset_content_type: ${{ matrix.archive_ext == 'zip' && 'application/zip' || 'application/gzip' }}
