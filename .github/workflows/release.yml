name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: context.ref.replace('refs/tags/', ''),
            name: `Veyra v${{ steps.get_version.outputs.version }}`,
            body: `## Veyra Programming Language v${{ steps.get_version.outputs.version }}
          
          ### Downloads
          
          Download the appropriate binary for your platform below:
          
          - **Linux x64**: \`veyra-linux-x64.tar.gz\`
          - **Linux ARM64**: \`veyra-linux-arm64.tar.gz\`
          - **Windows x64**: \`veyra-windows-x64.zip\`
          - **Windows ARM64**: \`veyra-windows-arm64.zip\`
          - **macOS x64 (Intel)**: \`veyra-macos-x64.tar.gz\`
          - **macOS ARM64 (Apple Silicon)**: \`veyra-macos-arm64.tar.gz\`
          - **VS Code Extension**: \`veyra-lang-${{ steps.get_version.outputs.version }}.vsix\`
          
          ### What's Included
          
          Each platform archive contains:
          - \`veyc\` - Veyra compiler
          - \`veyra-repl\` - Interactive REPL
          - \`veyra-fmt\` - Code formatter
          - \`veyra-lint\` - Linter and static analyzer
          - \`veyra-lsp\` - Language Server Protocol implementation
          - \`veyra-dbg\` - Debugger
          - \`veyra-pkg\` - Package manager
          - Standard library files
          - Documentation and examples
          
          ### Installation
          
          1. Download the binary for your OS and architecture
          2. Extract the archive
          3. Add the \`bin\` directory to your PATH
          4. Optionally install the VS Code extension
          
          See the [Quick Start Guide](https://github.com/k6w/veyra/blob/main/QUICK_START.md) for detailed installation instructions.`,
            draft: false,
            prerelease: false
          });
          return release.id;

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: veyra-linux-x64
            archive_ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: veyra-linux-arm64
            archive_ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: veyra-windows-x64
            archive_ext: zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact_name: veyra-windows-arm64
            archive_ext: zip
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: veyra-macos-x64
            archive_ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: veyra-macos-arm64
            archive_ext: tar.gz
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Build Compiler
      run: |
        cd compiler
        cargo build --release --target ${{ matrix.target }}
    
    - name: Build Tools
      run: |
        cd tools
        cargo build --release --target ${{ matrix.target }}
    
    - name: Create Release Directory (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release/bin
        mkdir -p release/stdlib
        mkdir -p release/examples
        cp compiler/target/${{ matrix.target }}/release/veyc release/bin/
        cp tools/target/${{ matrix.target }}/release/veyra-repl release/bin/
        cp tools/target/${{ matrix.target }}/release/veyra-dbg release/bin/
        cp tools/target/${{ matrix.target }}/release/veyra-lint release/bin/
        cp tools/target/${{ matrix.target }}/release/veyra-fmt release/bin/
        cp tools/target/${{ matrix.target }}/release/veyra-lsp release/bin/
        cp tools/target/${{ matrix.target }}/release/veyra-pkg release/bin/
        cp -r stdlib/* release/stdlib/
        cp -r examples/* release/examples/
        cp README.md release/
        cp LICENSE release/
        cp QUICK_START.md release/
    
    - name: Create Release Directory (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        New-Item -ItemType Directory -Force -Path release\bin
        New-Item -ItemType Directory -Force -Path release\stdlib
        New-Item -ItemType Directory -Force -Path release\examples
        Copy-Item compiler\target\${{ matrix.target }}\release\veyc.exe release\bin\
        Copy-Item tools\target\${{ matrix.target }}\release\veyra-repl.exe release\bin\
        Copy-Item tools\target\${{ matrix.target }}\release\veyra-dbg.exe release\bin\
        Copy-Item tools\target\${{ matrix.target }}\release\veyra-lint.exe release\bin\
        Copy-Item tools\target\${{ matrix.target }}\release\veyra-fmt.exe release\bin\
        Copy-Item tools\target\${{ matrix.target }}\release\veyra-lsp.exe release\bin\
        Copy-Item tools\target\${{ matrix.target }}\release\veyra-pkg.exe release\bin\
        Copy-Item -Recurse stdlib\* release\stdlib\
        Copy-Item -Recurse examples\* release\examples\
        Copy-Item README.md release\
        Copy-Item LICENSE release\
        Copy-Item QUICK_START.md release\
    
    - name: Create Archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        tar czf ../${{ matrix.artifact_name }}.tar.gz *
    
    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        Compress-Archive -Path * -DestinationPath ..\${{ matrix.artifact_name }}.zip
    
    - name: Upload Release Asset
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const artifactPath = path.join(process.cwd(), '${{ matrix.artifact_name }}.${{ matrix.archive_ext }}');
          const artifactName = '${{ matrix.artifact_name }}.${{ matrix.archive_ext }}';
          const contentType = '${{ matrix.archive_ext }}' === 'zip' ? 'application/zip' : 'application/gzip';
          
          const stats = fs.statSync(artifactPath);
          const fileData = fs.readFileSync(artifactPath);
          
          const uploadAsset = await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: artifactName,
            data: fileData
          });
          
          console.log(`Uploaded ${artifactName} successfully`);

  build-vscode-extension:
    name: Build VS Code Extension
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        cd tools/vscode_extension
        npm install
    
    - name: Install vsce
      run: npm install -g @vscode/vsce
    
    - name: Build extension
      run: |
        cd tools/vscode_extension
        vsce package --out veyra-lang-${{ needs.create-release.outputs.version }}.vsix
    
    - name: Upload VS Code Extension
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const artifactPath = path.join(process.cwd(), 'tools', 'vscode_extension', 'veyra-lang-${{ needs.create-release.outputs.version }}.vsix');
          const artifactName = 'veyra-lang-${{ needs.create-release.outputs.version }}.vsix';
          
          const fileData = fs.readFileSync(artifactPath);
          
          const uploadAsset = await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            name: artifactName,
            data: fileData
          });
          
          console.log(`Uploaded VS Code extension ${artifactName} successfully`);
